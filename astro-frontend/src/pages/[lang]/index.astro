---
import Layout from "../../layouts/Layout.astro";
import { useTranslations } from "../../i18n/utils";
import { getCollection } from "astro:content";
import NewsItem from "../../components/NewsItem.astro";

const { lang } = Astro.params;
const t = useTranslations(lang);
const searchParams = Object.fromEntries(Astro.url.searchParams);

let newsItems = await getCollection("news", ({ id }) => id.startsWith(lang));
newsItems.sort((a, b) => +new Date(b.data.date) - +new Date(a.data.date));
const programs = [...new Set(newsItems.map((item) => item.data.program))];

const filters = Object.fromEntries(Astro.url.searchParams);
delete filters["page"];
delete filters["search"];

let filteredData = newsItems.filter((item) => {
  let haystack = `${item.body} ${item.data.program}`.toLocaleLowerCase();
  let keys = Object.keys(filters);

  if (keys.length === 0 && "search" in searchParams) {
    return haystack.includes(searchParams.search?.toLowerCase());
  }
  if (keys.length > 0 && "search" in searchParams) {
    return (
      isChecked(item.data.program) &&
      haystack.includes(searchParams.search?.toLowerCase())
    );
  }
  return !item.data.draft;
});

const page = +Astro.url.searchParams.get("page") ?? 0;
const itemsPerPage = 3;
const totalPages = Math.ceil(filteredData.length / itemsPerPage);

filteredData = filteredData.slice(
  page * itemsPerPage,
  (page + 1) * itemsPerPage
);

function createPaginatedUrl(pageNum: number) {
  let url = new URL(Astro.url);
  url.searchParams.set("page", pageNum.toString());
  return url;
}

function isChecked(program: string) {
  let idx = programs.indexOf(program);
  return `cb${idx}` in filters;
}
---

<Layout title={t("title")}>
  <main class="grow bg-gray-100 px-2 py-10">
    <div class="max-w-7xl mx-auto">
      <div class="flex">
        <!-- Desktop Filter -->
        <div class="hidden sm:block pt-32 pr-6 min-w-max">
          <h2 class="font-semibold text-gray-600 mb-2">
            {t("heading")}
          </h2>
          <form id="filtersDesktop" class="flex flex-col items-start gap-4">
            {
              programs.map((filter) => (
                <label class="flex gap-2 text-sm font-semibold text-gray-900">
                  <input
                    type="checkbox"
                    id={filter + "desktop"}
                    name={`cb${programs.indexOf(filter)}`}
                    checked={isChecked(filter)}
                    value={1}
                  />
                  {filter}
                </label>
              ))
            }
            <div class="flex gap-2">
              <button
                class="font-semibold text-gray-600 outline outline-1 focus-visible:ring p-1 text-sm rounded-sm hover:text-gray-900"
              >
                {t("submit")}
              </button>
              <button
                id="resetBtnDesktop"
                class="font-semibold text-gray-600 outline outline-1 focus-visible:ring p-1 text-sm rounded-sm hover:text-gray-900"
              >
                {t("reset")}
              </button>
            </div>
          </form>
        </div>

        <div class="grow">
          <div class="border-b border-b-[#AF3C43] mb-6">
            <h1 class="text-4xl font-bold pb-2">{t("heading")}</h1>

          </div>

          <!-- Mobile Filter -->
          <div class="block sm:hidden mb-5">
            <h2 class="font-semibold text-gray-600 mb-2">
              {t("filter.heading")}
            </h2>
            <form id="filtersMobile" class="flex flex-col items-start gap-4">
              {
                programs.map((filter) => (
                  <label class="flex gap-2 text-sm font-semibold text-gray-900">
                    <input
                      type="checkbox"
                      id={filter + "mobile"}
                      name={`cb${programs.indexOf(filter)}`}
                      checked={isChecked(filter)}
                      value={1}
                    />
                    {filter}
                  </label>
                ))
              }
              <div class="flex gap-2">
                <button
                  class="font-semibold text-gray-600 outline outline-1 focus-visible:ring p-1 text-sm rounded-sm hover:text-gray-900"
                >
                  {t("submit")}
                </button>
                <button
                  id="resetBtnMobile"
                  class="font-semibold text-gray-600 outline outline-1 focus-visible:ring p-1 text-sm rounded-sm hover:text-gray-900"
                >
                  {t("reset")}
                </button>
              </div>
            </form>
          </div>

          <!-- Desktop search (needed because of unique ID constraint on form attribute) -->
          <div class="hidden sm:flex mb-5">
            <label class="sr-only" for="searchDesktop"
              >{t("search.heading")}</label
            >
            <input
              form="filtersDesktop"
              name="search"
              id="searchDesktop"
              class="p-2 grow"
              type="text"
              placeholder={t("search.placeholder")}
              value={searchParams.search ?? ""}
            />
            <button
              form="filtersDesktop"
              class="bg-[#2572B4] text-white p-2 no-wrap hover:bg-blue-950"
              >{t("search.button")}</button
            >
          </div>

          <div class="flex mb-5 sm:hidden">
            <label class="sr-only" for="searchMobile"
              >{t("search.heading")}</label
            >
            <input
              form="filtersMobile"
              id="searchMobile"
              name="search"
              class="p-2 grow"
              type="text"
              placeholder="search by benefit name or source"
              value={searchParams.search ?? ""}
            />
            <button
              form="filtersMobile"
              class="bg-[#2572B4] text-white p-2 no-wrap hover:bg-blue-950"
              >{t("search.button")}</button
            >
          </div>

          <div class="bg-white divide-y px-2 md:px-10 py-5 space-y-4">
            {filteredData.map((item) => <NewsItem item={item} />)}
          </div>
          <div class="text-center">
            {
              Array.from({ length: totalPages }, (_, i) => (
                <a
                  href={createPaginatedUrl(i)}
                  class="inline-block text-primary text-lg p-2 bg-slate-200 hover:bg-primary hover:text-white"
                >
                  {i + 1}
                </a>
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // reset form data and resubmit to page to remove query string and fetch clean data
  const formDesktop = document.querySelector(
    "#filtersDesktop"
  ) as HTMLFormElement;
  const resetBtnDesktop = document.querySelector("#resetBtnDesktop");
  resetBtnDesktop.addEventListener("click", (e) => {
    e.preventDefault();
    formDesktop.reset();
    window.location.href = window.location.origin + window.location.pathname;
  });

  const formMobile = document.querySelector(
    "#filtersMobile"
  ) as HTMLFormElement;
  const resetBtnMobile = document.querySelector("#resetBtnMobile");
  resetBtnMobile.addEventListener("click", (e) => {
    e.preventDefault();
    formMobile.reset();
    window.location.href = window.location.origin + window.location.pathname;
  });
</script>

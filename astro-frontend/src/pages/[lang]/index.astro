---
import Layout from "../../layouts/Layout.astro";
import { useTranslations } from "../../i18n/utils";
import { getCollection } from "astro:content";
import NewsItem from "../../components/NewsItem.astro";

const { lang } = Astro.params;
const t = useTranslations(lang);
const searchParams = Object.fromEntries(Astro.url.searchParams);

let newsItems = await getCollection("news", ({ id }) => id.startsWith(lang));
newsItems.sort((a, b) => +new Date(b.data.date) - +new Date(a.data.date));
const programs = [...new Set(newsItems.map((item) => item.data.program))];

const filters = Object.fromEntries(Astro.url.searchParams);
delete filters["page"];
delete filters["search"];

let filteredData = newsItems.filter((item) => {
  let haystack = `${item.body} ${item.data.program}`.toLocaleLowerCase();
  let keys = Object.keys(filters);

  if (keys.length === 0 && "search" in searchParams) {
    return haystack.includes(searchParams.search?.toLowerCase());
  }
  if (keys.length > 0 && "search" in searchParams) {
    return (
      isChecked(item.data.program) &&
      haystack.includes(searchParams.search?.toLowerCase())
    );
  }
  return !item.data.draft;
});

const page = +Astro.url.searchParams.get("page") ?? 0;
const itemsPerPage = 3;
const totalPages = Math.ceil(filteredData.length / itemsPerPage);

filteredData = filteredData.slice(
  page * itemsPerPage,
  (page + 1) * itemsPerPage
);

function createPaginatedUrl(pageNum: number) {
  let url = new URL(Astro.url);
  url.searchParams.set("page", pageNum.toString());
  url.hash = "#list";
  return url;
}

function isChecked(program: string) {
  let idx = programs.indexOf(program);
  return `cb${idx}` in filters;
}
---

<Layout title={t("title")}>
  <main class="grow px-2 py-10">
    <div class="max-w-7xl mx-auto">
      <div class="mb-10">
        <h1 class="text-4xl font-bold pb-2">{t("title")}</h1>
        <div class="border-b-4 border-b-[#AF3C43] w-14"></div>
      </div>

      <div
        id="list"
        class="flex flex-col md:flex-row md:justify-between gap-5 mb-5 h-full"
      >
        <div class="relative md:min-w-[400px]">
          <details class="w-full md:min-w-[400px] bg-white md:absolute border">
            <summary class="flex items-center justify-between p-2">
              <span class="text-lg text-[#6F6F6F]">{t("filter.summary")}</span>
              <svg
                width="16"
                height="11"
                viewBox="0 0 16 11"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M15.5607 3.34375L9.19249 10.0104C8.83675 10.3385 8.4259 10.5 8.01504 10.5C7.60419 10.5 7.19434 10.3372 6.88118 10.0117L0.512935 3.34505C0.00960756 2.86979 -0.127698 2.15104 0.120518 1.53125C0.368735 0.911458 0.953852 0.5 1.6017 0.5H14.3833C15.0316 0.5 15.6169 0.90526 15.8654 1.52865C16.1139 2.15203 16.0217 2.86979 15.5607 3.34375Z"
                  fill="#666666"></path>
              </svg>
            </summary>
            <form
              id="filters"
              class="flex flex-col items-start gap-4 p-2 pt-4 border-t"
            >
              {
                programs.map((filter) => (
                  <label class="flex gap-2 text-lg text-gray-900 items-center">
                    <input
                      type="checkbox"
                      id={filter}
                      name={`cb${programs.indexOf(filter)}`}
                      checked={isChecked(filter)}
                      value={1}
                    />
                    {filter}
                  </label>
                ))
              }
              <div class="flex gap-2 mx-auto">
                <button
                  class="font-semibold bg-primary text-white outline outline-1 focus-visible:ring p-1 rounded-sm hover:text-gray-100 text-lg"
                >
                  {t("submit")}
                </button>
                <button
                  id="resetBtn"
                  class="font-semibold text-gray-600 outline outline-1 focus-visible:ring p-1 rounded-sm hover:text-gray-900 text-lg"
                >
                  {t("reset")}
                </button>
              </div>
            </form>
          </details>
        </div>

        <div class="grow md:max-w-[600px]">
          <div class="flex mb-5">
            <label class="sr-only" for="search">{t("search.heading")}</label>
            <input
              form="filters"
              id="search"
              name="search"
              type="text"
              class="p-2 min-w-0 grow text-lg border"
              placeholder={t("search.placeholder")}
              value={searchParams.search ?? ""}
            />
            <button
              form="filters"
              class="bg-[#2572B4] text-white p-2 hover:bg-blue-950"
              >{t("search.button")}</button
            >
          </div>
        </div>
      </div>

      <div class="bg-white divide-y px-2 space-y-4 border-t mb-10 lg:ml-60">
        {filteredData.map((item) => <NewsItem item={item} />)}
      </div>

      <div class="text-center">
        {
          Array.from({ length: totalPages }, (_, i) => (
            <a
              href={createPaginatedUrl(i)}
              class="inline-block text-[#335075] text-[20px] py-[10px] px-[16px] bg-[#DCDEE1] hover:bg-[#335075] hover:text-[#DCDEE1] no-underline border"
            >
              {i + 1}
            </a>
          ))
        }
      </div>
    </div>
  </main>

  <div class="bg-[#EBF2FC] px-2">
    <div class="max-w-7xl mx-auto py-5 flex gap-5">
      <img src="/text-bubble.png" class="hidden md:block" alt="" />
      <div class="flex flex-col justify-between">
        <h2 class="text-2xl md:text-4xl">
          {t("wip.title")}
        </h2>
        <p class="md:text-[20px] font-[400]">
          {t("wip.p")}
        </p>
        <button
          class="bg-primary text-white p-2 rounded hover:bg-slate-950 max-w-fit"
          >{t("wip.survey")}</button
        >
      </div>
    </div>
  </div>

  <div class="py-10 px-2">
    <div class="max-w-7xl mx-auto">
      <p>{t("date-modified")}</p>
    </div>
  </div>
</Layout>

<script>
  // reset form data and resubmit to page to remove query string and fetch clean data
  const form = document.querySelector("#filters") as HTMLFormElement;
  const resetBtn = document.querySelector("#resetBtn");
  resetBtn.addEventListener("click", (e) => {
    e.preventDefault();
    form.reset();
    window.location.href = window.location.origin + window.location.pathname;
  });
</script>
